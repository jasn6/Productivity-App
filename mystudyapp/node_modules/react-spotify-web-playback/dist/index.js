"use strict";
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpreadProps(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = function(obj, key, value) {
    return key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value
    }) : obj[key] = value;
};
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
var __publicField = function(obj, key, value) {
    __defNormalProp(obj, (typeof key === "undefined" ? "undefined" : _typeof(key)) !== "symbol" ? key + "" : key, value);
    return value;
};
// src/index.tsx
var src_exports = {};
__export(src_exports, {
    STATUS: function() {
        return STATUS;
    },
    TYPE: function() {
        return TYPE;
    },
    default: function() {
        return src_default;
    }
});
module.exports = __toCommonJS(src_exports);
var import_react7 = require("react");
var import_deep_equal = __toESM(require("@gilbarbara/deep-equal"));
var import_memoize_one = __toESM(require("memoize-one"));
// src/components/Devices.tsx
var import_react3 = require("react");
// src/components/ClickOutside.tsx
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
function ClickOutside(_param) {
    var children = _param.children, onClick = _param.onClick, rest = _objectWithoutProperties(_param, [
        "children",
        "onClick"
    ]);
    var containerRef = (0, import_react.useRef)(null);
    var isTouchRef = (0, import_react.useRef)(false);
    var handleClick = (0, import_react.useCallback)(function(event) {
        if (event.type === "touchend") {
            isTouchRef.current = true;
        }
        if (event.type === "click" && isTouchRef.current) {
            return;
        }
        var el = containerRef.current;
        if (el && !el.contains(event.target)) {
            onClick();
        }
    }, [
        onClick
    ]);
    (0, import_react.useEffect)(function() {
        document.addEventListener("touchend", handleClick, true);
        document.addEventListener("click", handleClick, true);
        return function() {
            document.removeEventListener("touchend", handleClick, true);
            document.removeEventListener("click", handleClick, true);
        };
    });
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", _objectSpreadProps(_objectSpread({}, rest), {
        ref: containerRef,
        children: children
    }));
}
// src/components/icons/Devices.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function DevicesIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", {
            d: "M6.765 89.483h40.412v6.765H6.269C2.765 96.248 0 93.483 0 89.978V20.703c0-3.504 2.765-6.27 6.27-6.27h40.907v6.766H6.765v68.285zm16.327 20.702a3.4 3.4 0 0 1 3.383-3.383h20.702v6.765H26.475c-.915 0-1.72-.347-2.344-1.038a3.064 3.064 0 0 1-1.039-2.344zm46.681-95.752h51.958c3.504 0 6.269 2.765 6.269 6.269v86.596c0 3.504-2.765 6.27-6.27 6.27H69.774c-3.504 0-6.27-2.766-6.27-6.27V20.702c0-3.504 2.766-6.27 6.27-6.27zm-.496 5.842l.07 87.52 52.88-.07-.07-87.45h-52.88zm13.89 45.573c3.464-3.462 7.714-5.23 12.585-5.23 9.827 0 17.815 7.988 17.815 17.815 0 9.827-7.988 17.815-17.815 17.815-9.827 0-17.815-7.988-17.815-17.815 0-4.87 1.768-9.122 5.23-12.585zm4.124 21.045c2.381 2.381 5.195 3.582 8.46 3.582 6.598 0 12.043-5.445 12.043-12.042 0-6.597-5.445-12.043-12.042-12.043-6.597 0-12.042 5.446-12.042 12.043 0 3.266 1.2 6.08 3.581 8.46zm12.935-44.466c-1.247 1.247-2.741 1.863-4.474 1.863-3.504 0-6.27-2.765-6.27-6.269s2.766-6.27 6.27-6.27c3.504 0 6.27 2.766 6.27 6.27 0 1.72-.608 3.218-1.796 4.406z",
            fill: "currentColor"
        })
    }));
}
// src/styles.tsx
var import_react2 = require("react");
var import_nano_css = require("nano-css");
var import_jsx = require("nano-css/addon/jsx.js");
var import_keyframes = require("nano-css/addon/keyframes.js");
var import_nesting = require("nano-css/addon/nesting.js");
var import_rule = require("nano-css/addon/rule.js");
var import_style = require("nano-css/addon/style.js");
var import_styled = require("nano-css/addon/styled.js");
var nano = (0, import_nano_css.create)({
    h: import_react2.createElement
});
(0, import_rule.addon)(nano);
(0, import_keyframes.addon)(nano);
(0, import_jsx.addon)(nano);
(0, import_style.addon)(nano);
(0, import_styled.addon)(nano);
(0, import_nesting.addon)(nano);
var keyframes = nano.keyframes, put = nano.put, styled = nano.styled;
var px = function(value) {
    return typeof value === "number" ? "".concat(value, "px") : value;
};
function getMergedStyles(styles) {
    return _objectSpread({
        activeColor: "#1cb954",
        altColor: "#ccc",
        bgColor: "#fff",
        color: "#333",
        errorColor: "#a60000",
        height: 48,
        loaderColor: "#ccc",
        loaderSize: 32,
        sliderColor: "#666",
        sliderHandleBorderRadius: "50%",
        sliderHandleColor: "#000",
        sliderHeight: 4,
        sliderTrackBorderRadius: 0,
        sliderTrackColor: "#ccc",
        trackArtistColor: "#666",
        trackNameColor: "#333"
    }, styles);
}
// src/components/Devices.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var Wrapper = styled("div")({
    "pointer-events": "all",
    position: "relative",
    zIndex: 20,
    "> div": {
        display: "flex",
        flexDirection: "column",
        padding: px(8),
        position: "absolute",
        right: "-".concat(px(3)),
        button: {
            display: "block",
            padding: px(8),
            whiteSpace: "nowrap",
            "&.rswp__devices__active": {
                fontWeight: "bold"
            }
        }
    },
    "> button": {
        fontSize: px(26)
    }
}, function(param) {
    var style = param.style;
    var _obj;
    return {
        "> button": {
            color: style.c
        },
        "> div": (_obj = {
            backgroundColor: style.bgColor,
            boxShadow: style.altColor ? "1px 1px 10px ".concat(style.altColor) : "none"
        }, _defineProperty(_obj, style.p, "120%"), _defineProperty(_obj, "button", {
            color: style.c
        }), _obj)
    };
}, "DevicesRSWP");
function Devices(props) {
    var currentDeviceId = props.currentDeviceId, deviceId = props.deviceId, devices = props.devices, onClickDevice = props.onClickDevice, open = props.open, playerPosition = props.playerPosition, _props_styles = props.styles, activeColor = _props_styles.activeColor, altColor = _props_styles.altColor, bgColor = _props_styles.bgColor, color = _props_styles.color, title = props.title;
    var _ref = _slicedToArray((0, import_react3.useState)(open), 2), isOpen = _ref[0], setOpen = _ref[1];
    var handleClickSetDevice = function(event) {
        var dataset = event.currentTarget.dataset;
        if (dataset.id) {
            onClickDevice(dataset.id);
            setOpen(false);
        }
    };
    var handleClickToggleDevices = function() {
        setOpen(function(s) {
            return !s;
        });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Wrapper, {
        "data-component-name": "Devices",
        "data-device-id": currentDeviceId,
        style: {
            altColor: altColor,
            bgColor: bgColor,
            c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,
            p: playerPosition
        },
        children: !!devices.length && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
            children: [
                isOpen && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ClickOutside, {
                    onClick: handleClickToggleDevices,
                    children: devices.map(function(d) {
                        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("button", {
                            "aria-label": d.name,
                            className: d.id === currentDeviceId ? "rswp__devices__active" : void 0,
                            "data-id": d.id,
                            onClick: handleClickSetDevice,
                            type: "button",
                            children: d.name
                        }, d.id);
                    })
                }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("button", {
                    "aria-label": title,
                    onClick: handleClickToggleDevices,
                    title: title,
                    type: "button",
                    children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DevicesIcon, {})
                })
            ]
        })
    });
}
// src/components/Volume.tsx
var import_react4 = require("react");
var import_react_use = require("react-use");
var import_react_range_slider = __toESM(require("@gilbarbara/react-range-slider"));
// src/components/icons/VolumeHigh.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
function VolumeHigh(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", _objectSpreadProps(_objectSpread({
        "data-component-name": "VolumeHigh",
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", {
            d: "M0 85.869V40.38h21.24l39.41-22.743v90.974L21.24 85.87H0zm53.069 9.627V30.754L23.285 47.963H7.581v30.324h15.704L53.07 95.496zM92.355 18.86l4.889-5.723c13.772 12.64 21.94 30.407 21.94 49.724 0 19.318-8.168 37.085-21.94 49.725l-4.89-5.724c12.104-11.208 19.318-26.89 19.318-44 0-17.112-7.214-32.793-19.317-44.002zM75.303 38.835l4.889-5.724c5.246 5.008 9.062 11.209 11.149 18.542a41.69 41.69 0 0 1 1.55 11.21c0 11.506-4.77 22.12-12.7 29.75l-4.888-5.723c6.26-6.26 10.076-14.786 10.076-24.028 0-9.241-3.697-17.767-10.076-24.027z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/VolumeLow.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
function VolumeLow(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("svg", _objectSpreadProps(_objectSpread({
        "data-component-name": "VolumeLow",
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("path", {
            d: "M0 85.606V40.12h21.24l39.41-22.744v90.975L21.24 85.606H0zm53.069 9.627V30.492L23.285 47.7H7.581v30.325h15.704L53.07 95.233zm22.234-56.66l4.889-5.725c5.246 5.009 9.062 11.21 11.149 18.543a41.69 41.69 0 0 1 1.55 11.209c0 11.507-4.77 22.12-12.7 29.751l-4.888-5.724c6.26-6.26 10.076-14.786 10.076-24.027 0-9.242-3.697-17.768-10.076-24.028z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/VolumeMute.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
function VolumeMute(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("svg", _objectSpreadProps(_objectSpread({
        "data-component-name": "VolumeMute",
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("path", {
            d: "M127.993 83.387l-5.278 5.279-20.53-20.559L81.62 88.672l-5.233-5.292 20.55-20.522L76.38 42.3l5.248-5.248 20.557 20.558 20.522-20.551L128 42.293l-20.565 20.565 20.558 20.53zM0 85.607V40.118h21.24l39.41-22.744v90.975L21.24 85.606H0zm53.069 9.626V30.492L23.285 47.7H7.581v30.325h15.704L53.07 95.233z",
            fill: "currentColor"
        })
    }));
}
// src/components/Volume.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var Wrapper2 = styled("div")({
    "pointer-events": "all",
    position: "relative",
    zIndex: 20,
    "> div": {
        display: "flex",
        flexDirection: "column",
        padding: px(12),
        position: "absolute",
        right: "-".concat(px(3))
    },
    "> button": {
        fontSize: px(26)
    },
    "@media (max-width: 1023px)": {
        display: "none"
    }
}, function(param) {
    var style = param.style;
    return {
        "> button": {
            color: style.c
        },
        "> div": _defineProperty({
            backgroundColor: style.bgColor,
            boxShadow: style.altColor ? "1px 1px 10px ".concat(style.altColor) : "none"
        }, style.p, "120%")
    };
}, "VolumeRSWP");
function Volume(props) {
    var playerPosition = props.playerPosition, setVolume2 = props.setVolume, _props_styles = props.styles, altColor = _props_styles.altColor, bgColor = _props_styles.bgColor, color = _props_styles.color, title = props.title, volume = props.volume;
    var _ref = _slicedToArray((0, import_react4.useState)(false), 2), isOpen = _ref[0], setIsOpen = _ref[1];
    var _ref1 = _slicedToArray((0, import_react4.useState)(volume), 2), volumeState = _ref1[0], setVolumeState = _ref1[1];
    var timeoutRef = (0, import_react4.useRef)();
    var previousVolume = (0, import_react_use.usePrevious)(volume);
    (0, import_react4.useEffect)(function() {
        if (previousVolume !== volume && volume !== volumeState) {
            setVolumeState(volume);
        }
    }, [
        previousVolume,
        volume,
        volumeState
    ]);
    var handleClick = function() {
        setIsOpen(function(s) {
            return !s;
        });
    };
    var handleChangeSlider = function(param) {
        var y = param.y;
        var currentvolume = Math.round(y) / 100;
        clearTimeout(timeoutRef.current);
        timeoutRef.current = window.setTimeout(function() {
            setVolume2(currentvolume);
        }, 250);
        setVolumeState(currentvolume);
    };
    var handleAfterEnd = function() {
        setTimeout(function() {
            setIsOpen(false);
        }, 100);
    };
    var icon = /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(VolumeHigh, {});
    if (volume === 0) {
        icon = /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(VolumeMute, {});
    } else if (volume <= 0.5) {
        icon = /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(VolumeLow, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Wrapper2, {
        "data-component-name": "Volume",
        "data-value": volume,
        style: {
            altColor: altColor,
            bgColor: bgColor,
            c: color,
            p: playerPosition
        },
        children: [
            isOpen && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ClickOutside, {
                onClick: handleClick,
                children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_react_range_slider.default, {
                    axis: "y",
                    className: "volume",
                    onAfterEnd: handleAfterEnd,
                    onChange: handleChangeSlider,
                    styles: {
                        options: {
                            thumbBorder: "2px solid ".concat(color),
                            thumbBorderRadius: 12,
                            thumbColor: bgColor,
                            thumbSize: 12,
                            padding: 0,
                            rangeColor: altColor || "#ccc",
                            trackColor: color,
                            width: 6
                        }
                    },
                    y: volume * 100,
                    yMax: 100,
                    yMin: 0
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("button", {
                "aria-label": title,
                onClick: !isOpen ? handleClick : void 0,
                title: title,
                type: "button",
                children: icon
            })
        ]
    });
}
// src/components/Actions.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
var Wrapper3 = styled("div")({
    alignItems: "center",
    display: "flex",
    justifyContent: "flex-end",
    paddingRight: px(10),
    "pointer-events": "none",
    "> div + div": {
        marginLeft: px(10)
    },
    "@media (max-width: 1023px)": {
        bottom: 0,
        position: "absolute",
        right: 0,
        width: "auto"
    }
}, function(param) {
    var style = param.style;
    return {
        height: px(style.h)
    };
}, "ActionsRSWP");
function Actions(props) {
    var currentDeviceId = props.currentDeviceId, deviceId = props.deviceId, devices = props.devices, isDevicesOpen = props.isDevicesOpen, locale = props.locale, onClickDevice = props.onClickDevice, playerPosition = props.playerPosition, setVolume2 = props.setVolume, styles = props.styles, volume = props.volume;
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(Wrapper3, {
        "data-component-name": "Actions",
        style: {
            h: styles.height
        },
        children: [
            currentDeviceId && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Volume, {
                playerPosition: playerPosition,
                setVolume: setVolume2,
                styles: styles,
                title: locale.volume,
                volume: volume
            }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Devices, {
                currentDeviceId: currentDeviceId,
                deviceId: deviceId,
                devices: devices,
                onClickDevice: onClickDevice,
                open: isDevicesOpen,
                playerPosition: playerPosition,
                styles: styles,
                title: locale.devices
            })
        ]
    });
}
// src/components/Content.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var Wrapper4 = styled("div")({
    alignItems: "center",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    position: "relative",
    "> *": {
        width: "100%",
        "@media (min-width: 1024px)": {
            width: "33.3333%"
        }
    },
    "@media (min-width: 1024px)": {
        flexDirection: "row"
    }
}, function(param) {
    var style = param.style;
    return {
        minHeight: px(style.h)
    };
}, "ContentRSWP");
function Content(param) {
    var children = param.children, styles = param.styles;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Wrapper4, {
        "data-component-name": "Content",
        style: {
            h: styles.height
        },
        children: children
    });
}
// src/components/icons/Next.tsx
var import_jsx_runtime10 = require("react/jsx-runtime");
function Next(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("path", {
            d: "M98.91 53.749L5.817 0v128L98.91 74.251v47.93h23.273V5.819H98.909z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/Pause.tsx
var import_jsx_runtime11 = require("react/jsx-runtime");
function Pause(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", {
            d: "M41.86 128V0H8.648v128h33.21zm77.491 0V0h-33.21v128h33.21z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/Play.tsx
var import_jsx_runtime12 = require("react/jsx-runtime");
function Play(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("path", {
            d: "M119.351 64L8.65 0v128z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/Previous.tsx
var import_jsx_runtime13 = require("react/jsx-runtime");
function Previous(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("path", {
            d: "M29.09 53.749V5.819H5.819v116.363h23.273v-47.93L122.18 128V0z",
            fill: "currentColor"
        })
    }));
}
// src/components/Controls.tsx
var import_jsx_runtime14 = require("react/jsx-runtime");
var Wrapper5 = styled("div")({}, function(param) {
    var style = param.style;
    return {
        alignItems: "center",
        display: "flex",
        height: px(style.h),
        justifyContent: "center",
        "@media (max-width: 767px)": {
            padding: px(10)
        },
        "> div": {
            minWidth: px(style.h),
            textAlign: "center"
        },
        button: {
            alignItems: "center",
            color: style.c,
            display: "inline-flex",
            fontSize: px(16),
            height: px(48),
            justifyContent: "center",
            width: px(48),
            "&.rswp__toggle": {
                fontSize: px(28)
            }
        }
    };
}, "ControlsRSWP");
function Controls(props) {
    var isExternalDevice = props.isExternalDevice, isPlaying = props.isPlaying, locale = props.locale, nextTracks = props.nextTracks, onClickNext = props.onClickNext, onClickPrevious = props.onClickPrevious, onClickTogglePlay = props.onClickTogglePlay, previousTracks = props.previousTracks, _props_styles = props.styles, color = _props_styles.color, height = _props_styles.height;
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(Wrapper5, {
        "data-component-name": "Controls",
        "data-playing": isPlaying,
        style: {
            c: color,
            h: height
        },
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", {
                children: (!!previousTracks.length || isExternalDevice) && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", {
                    "aria-label": locale.previous,
                    onClick: onClickPrevious,
                    title: locale.previous,
                    type: "button",
                    children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Previous, {})
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", {
                children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", {
                    "aria-label": isPlaying ? locale.pause : locale.play,
                    className: "rswp__toggle",
                    onClick: onClickTogglePlay,
                    title: isPlaying ? locale.pause : locale.play,
                    type: "button",
                    children: isPlaying ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Pause, {}) : /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Play, {})
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", {
                children: (!!nextTracks.length || isExternalDevice) && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", {
                    "aria-label": locale.next,
                    onClick: onClickNext,
                    title: locale.next,
                    type: "button",
                    children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Next, {})
                })
            })
        ]
    });
}
// src/components/ErrorMessage.tsx
var import_jsx_runtime15 = require("react/jsx-runtime");
var Wrapper6 = styled("p")({
    textAlign: "center",
    width: "100%"
}, function(param) {
    var style = param.style;
    return {
        borderTop: "1px solid ".concat(style.errorColor),
        color: style.errorColor,
        height: px(style.h),
        lineHeight: px(style.h)
    };
}, "ErrorRSWP");
function ErrorMessage(param) {
    var children = param.children, _param_styles = param.styles, errorColor = _param_styles.errorColor, height = _param_styles.height;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Wrapper6, {
        "data-component-name": "ErrorMessage",
        style: {
            errorColor: errorColor,
            h: height
        },
        children: children
    });
}
// src/components/Info.tsx
var import_react5 = require("react");
var import_react_use2 = require("react-use");
// src/components/icons/Favorite.tsx
var import_jsx_runtime16 = require("react/jsx-runtime");
function Favorite(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("path", {
            d: "M117.686 16.288c-4.297-4.297-9.22-7.266-14.924-8.907-11.33-3.36-23.518-.86-32.582 6.72l-.781.546c-.938.703-3.282 1.641-5.392 1.641-2.187 0-4.688-1.172-5.313-1.64-.39-.235-.625-.391-.86-.548-9.063-7.579-21.252-10.08-32.582-6.72C13.922 10.74 4.39 19.96 1.187 32.072c-3.204 12.19.156 25.082 9.142 34.145L54.24 117.63c2.579 2.97 5.782 4.454 9.767 4.454 3.985 0 7.189-1.485 9.767-4.454l43.912-51.413C124.484 59.42 128 50.121 128 41.213c0-8.907-3.516-18.127-10.314-24.925z",
            fill: "currentColor"
        })
    }));
}
// src/components/icons/FavoriteOutline.tsx
var import_jsx_runtime17 = require("react/jsx-runtime");
function FavoriteOutline(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("svg", _objectSpreadProps(_objectSpread({
        height: "1em",
        preserveAspectRatio: "xMidYMid",
        viewBox: "0 0 128 128",
        width: "1em"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("path", {
            d: "M126.772 51.913c-1.641 6.254-4.848 11.796-9.505 16.528l-41.524 48.612c-3.096 3.585-7.039 5.392-11.765 5.392-4.726 0-8.668-1.807-11.768-5.396L10.66 68.34C6.077 63.754 2.814 58.12 1.266 52.004.418 49 0 45.775 0 42.443 0 32.631 3.808 23.4 10.737 16.472 19.61 7.597 31.993 3.833 44.055 6.293c6.015 1.267 11.383 3.881 16.17 7.883a5.834 5.834 0 0 0 3.753 1.342c1.4 0 2.658-.459 3.674-1.339 9.686-7.953 22.313-10.577 34.105-7.094 5.884 1.828 11.005 4.928 15.463 9.387 9.322 9.322 12.893 22.716 9.552 35.44zm-14.428 12.012c7.721-7.721 10.73-18.85 8.013-29.263-3.259-12.157-13.877-21.773-27.765-22.377-7.712-.374-14.583 1.94-20.726 7.016-.334.223-.49.33-.73.511a11.431 11.431 0 0 1-4.092 1.923c-1.093.273-2.062.412-3.066.412-2.319 0-5.33-1.013-6.809-1.998-.37-.247-.701-.496-1.228-.902-5.627-4.652-11.977-6.96-19.156-6.96a30.137 30.137 0 0 0-21.323 8.825c-5.7 5.776-8.834 13.336-8.834 21.331 0 8.072 3.133 15.63 8.878 21.379l41.75 48.913c1.77 2.055 3.998 3.082 6.722 3.082s4.95-1.026 6.722-3.08l41.644-48.812z",
            fill: "currentColor"
        })
    }));
}
function checkTracksStatus(token, tracks) {
    return _checkTracksStatus.apply(this, arguments);
}
function _checkTracksStatus() {
    _checkTracksStatus = // src/spotify.ts
    _asyncToGenerator(function(token, tracks) {
        var ids;
        return __generator(this, function(_state) {
            ids = Array.isArray(tracks) ? tracks : [
                tracks
            ];
            return [
                2,
                fetch("https://api.spotify.com/v1/me/tracks/contains?ids=".concat(ids), {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "GET"
                }).then(function(d) {
                    return d.json();
                })
            ];
        });
    });
    return _checkTracksStatus.apply(this, arguments);
}
function getDevices(token) {
    return _getDevices.apply(this, arguments);
}
function _getDevices() {
    _getDevices = _asyncToGenerator(function(token) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/devices", {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "GET"
                }).then(function(d) {
                    return d.json();
                })
            ];
        });
    });
    return _getDevices.apply(this, arguments);
}
function getPlaybackState(token) {
    return _getPlaybackState.apply(this, arguments);
}
function _getPlaybackState() {
    _getPlaybackState = _asyncToGenerator(function(token) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player", {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "GET"
                }).then(function(d) {
                    if (d.status === 204) {
                        return null;
                    }
                    return d.json();
                })
            ];
        });
    });
    return _getPlaybackState.apply(this, arguments);
}
function pause(token) {
    return _pause.apply(this, arguments);
}
function _pause() {
    _pause = _asyncToGenerator(function(token) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/pause", {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _pause.apply(this, arguments);
}
function play(token, _) {
    return _play.apply(this, arguments);
}
function _play() {
    _play = _asyncToGenerator(function(token, param) {
        var context_uri, deviceId, _param_offset, offset, uris, body, isArtist, position;
        return __generator(this, function(_state) {
            context_uri = param.context_uri, deviceId = param.deviceId, _param_offset = param.offset, offset = _param_offset === void 0 ? 0 : _param_offset, uris = param.uris;
            if (context_uri) {
                isArtist = context_uri.indexOf("artist") >= 0;
                ;
                if (!isArtist) {
                    position = {
                        position: offset
                    };
                }
                body = JSON.stringify({
                    context_uri: context_uri,
                    offset: position
                });
            } else if (Array.isArray(uris) && uris.length) {
                body = JSON.stringify({
                    uris: uris,
                    offset: {
                        position: offset
                    }
                });
            }
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/play?device_id=".concat(deviceId), {
                    body: body,
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _play.apply(this, arguments);
}
function previous(token) {
    return _previous.apply(this, arguments);
}
function _previous() {
    _previous = _asyncToGenerator(function(token) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/previous", {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "POST"
                })
            ];
        });
    });
    return _previous.apply(this, arguments);
}
function next(token) {
    return _next.apply(this, arguments);
}
function _next() {
    _next = _asyncToGenerator(function(token) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/next", {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "POST"
                })
            ];
        });
    });
    return _next.apply(this, arguments);
}
function removeTracks(token, tracks) {
    return _removeTracks.apply(this, arguments);
}
function _removeTracks() {
    _removeTracks = _asyncToGenerator(function(token, tracks) {
        var ids;
        return __generator(this, function(_state) {
            ids = Array.isArray(tracks) ? tracks : [
                tracks
            ];
            return [
                2,
                fetch("https://api.spotify.com/v1/me/tracks", {
                    body: JSON.stringify(ids),
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "DELETE"
                })
            ];
        });
    });
    return _removeTracks.apply(this, arguments);
}
function saveTracks(token, tracks) {
    return _saveTracks.apply(this, arguments);
}
function _saveTracks() {
    _saveTracks = _asyncToGenerator(function(token, tracks) {
        var ids;
        return __generator(this, function(_state) {
            ids = Array.isArray(tracks) ? tracks : [
                tracks
            ];
            return [
                2,
                fetch("https://api.spotify.com/v1/me/tracks", {
                    body: JSON.stringify({
                        ids: ids
                    }),
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _saveTracks.apply(this, arguments);
}
function seek(token, position) {
    return _seek.apply(this, arguments);
}
function _seek() {
    _seek = _asyncToGenerator(function(token, position) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/seek?position_ms=".concat(position), {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _seek.apply(this, arguments);
}
function setDevice(token, deviceId, shouldPlay) {
    return _setDevice.apply(this, arguments);
}
function _setDevice() {
    _setDevice = _asyncToGenerator(function(token, deviceId, shouldPlay) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player", {
                    body: JSON.stringify({
                        device_ids: [
                            deviceId
                        ],
                        play: shouldPlay
                    }),
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _setDevice.apply(this, arguments);
}
function setVolume(token, volume) {
    return _setVolume.apply(this, arguments);
}
function _setVolume() {
    _setVolume = _asyncToGenerator(function(token, volume) {
        return __generator(this, function(_state) {
            return [
                2,
                fetch("https://api.spotify.com/v1/me/player/volume?volume_percent=".concat(volume), {
                    headers: {
                        Authorization: "Bearer ".concat(token),
                        "Content-Type": "application/json"
                    },
                    method: "PUT"
                })
            ];
        });
    });
    return _setVolume.apply(this, arguments);
}
// src/utils.ts
var import_exenv = require("exenv");
var STATUS = {
    ERROR: "ERROR",
    IDLE: "IDLE",
    INITIALIZING: "INITIALIZING",
    READY: "READY",
    RUNNING: "RUNNING",
    UNSUPPORTED: "UNSUPPORTED"
};
var TYPE = {
    DEVICE: "device_update",
    FAVORITE: "favorite_update",
    PLAYER: "player_update",
    PROGRESS: "progress_update",
    STATUS: "status_update",
    TRACK: "track_update"
};
function getLocale(locale) {
    return _objectSpread({
        devices: "Devices",
        next: "Next",
        pause: "Pause",
        play: "Play",
        previous: "Previous",
        removeTrack: "Remove from your favorites",
        saveTrack: "Save to your favorites",
        title: "{name} on SPOTIFY",
        volume: "Volume"
    }, locale);
}
function getSpotifyLink(uri) {
    var _uri_split = _slicedToArray(uri.split(":"), 3), tmp = _uri_split[1], type = tmp === void 0 ? "" : tmp, tmp1 = _uri_split[2], id = tmp1 === void 0 ? "" : tmp1;
    return "https://open.spotify.com/".concat(type, "/").concat(id);
}
function getSpotifyLinkTitle(name, locale) {
    return locale.replace("{name}", name);
}
function getSpotifyURIType(uri) {
    var _uri_split = _slicedToArray(uri.split(":"), 2), tmp = _uri_split[1], type = tmp === void 0 ? "" : tmp;
    return type;
}
function isNumber(value) {
    return typeof value === "number";
}
function loadSpotifyPlayer() {
    return new Promise(function(resolve, reject) {
        var scriptTag = document.getElementById("spotify-player");
        if (!scriptTag) {
            var script = document.createElement("script");
            script.id = "spotify-player";
            script.type = "text/javascript";
            script.async = false;
            script.defer = true;
            script.src = "https://sdk.scdn.co/spotify-player.js";
            script.onload = function() {
                return resolve();
            };
            script.onerror = function(error) {
                return reject(new Error("loadScript: ".concat(error.message)));
            };
            document.head.appendChild(script);
        } else {
            resolve();
        }
    });
}
function parseVolume(value) {
    if (!isNumber(value)) {
        return 1;
    }
    if (value > 1) {
        return value / 100;
    }
    return value;
}
function round(number) {
    var digits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
    var factor = Math.pow(10, digits);
    return Math.round(number * factor) / factor;
}
function validateURI(input) {
    var validTypes = [
        "album",
        "artist",
        "playlist",
        "show",
        "track"
    ];
    if (input && input.indexOf(":") > -1) {
        var _input_split = _slicedToArray(input.split(":"), 3), key = _input_split[0], type = _input_split[1], id = _input_split[2];
        if (key === "spotify" && validTypes.indexOf(type) >= 0 && id.length === 22) {
            return true;
        }
    }
    return false;
}
// src/components/Info.tsx
var import_jsx_runtime18 = require("react/jsx-runtime");
var Wrapper7 = styled("div")({
    alignItems: "center",
    display: "flex",
    textAlign: "left",
    a: {
        display: "inline-flex",
        textDecoration: "none"
    },
    "@media (max-width: 1023px)": {
        borderBottom: "1px solid #ccc",
        display: "none",
        width: "100%"
    },
    "&.rswp__active": {
        "@media (max-width: 1023px)": {
            display: "flex"
        }
    }
}, function(param) {
    var style = param.style;
    return {
        height: px(style.h),
        img: {
            height: px(style.h),
            width: px(style.h)
        }
    };
}, "InfoRSWP");
var Title = styled("div")({
    paddingLeft: px(10),
    whiteSpace: "nowrap",
    p: {
        fontSize: px(14),
        lineHeight: 1.3,
        paddingRight: px(5),
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        width: "100%",
        "&:first-child": {
            alignItems: "center",
            display: "inline-flex"
        }
    },
    span: {
        display: "inline-block",
        overflow: "hidden",
        textOverflow: "ellipsis"
    },
    button: {
        fontSize: "110%",
        marginLeft: px(5)
    }
}, function(param) {
    var style = param.style;
    return {
        width: "calc(100% - ".concat(px(style.h), ")"),
        p: {
            a: {
                color: style.trackNameColor
            },
            "&:last-child": {
                a: {
                    color: style.trackArtistColor
                }
            }
        },
        button: {
            color: style.c,
            "&.rswp__active": {
                color: style.activeColor
            }
        }
    };
});
function Info(props) {
    var isActive = props.isActive, locale = props.locale, onFavoriteStatusChange = props.onFavoriteStatusChange, showSaveIcon = props.showSaveIcon, _props_styles = props.styles, activeColor = _props_styles.activeColor, color = _props_styles.color, height = _props_styles.height, trackArtistColor = _props_styles.trackArtistColor, trackNameColor = _props_styles.trackNameColor, token = props.token, _props_track = props.track, id = _props_track.id, name = _props_track.name, uri = _props_track.uri, image = _props_track.image, _props_track_artists = _props_track.artists, artists = _props_track_artists === void 0 ? [] : _props_track_artists, updateSavedStatus = props.updateSavedStatus;
    var _ref = _slicedToArray((0, import_react5.useState)(false), 2), isSaved = _ref[0], setIsSaved = _ref[1];
    var isMounted = (0, import_react5.useRef)(false);
    var previousId = (0, import_react_use2.usePrevious)(id);
    var updateState = function(state) {
        if (!isMounted.current) {
            return;
        }
        setIsSaved(state);
    };
    var setStatus = function() {
        var _ref = _asyncToGenerator(function() {
            var status, _ref, isFavorite;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!isMounted.current) {
                            return [
                                2
                            ];
                        }
                        if (updateSavedStatus && id) {
                            updateSavedStatus(function(newStatus) {
                                updateState(newStatus);
                            });
                        }
                        return [
                            4,
                            checkTracksStatus(token, id)
                        ];
                    case 1:
                        status = _state.sent();
                        _ref = _slicedToArray(status || [
                            false
                        ], 1), isFavorite = _ref[0];
                        updateState(isFavorite);
                        onFavoriteStatusChange(isSaved);
                        return [
                            2
                        ];
                }
            });
        });
        return function setStatus() {
            return _ref.apply(this, arguments);
        };
    }();
    (0, import_react_use2.useMount)(/*#__PURE__*/ _asyncToGenerator(function() {
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    isMounted.current = true;
                    if (!(showSaveIcon && id)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        setStatus()
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    }));
    (0, import_react5.useEffect)(function() {
        if (showSaveIcon && previousId !== id && id) {
            updateState(false);
            setStatus();
        }
    });
    (0, import_react_use2.useUnmount)(function() {
        isMounted.current = false;
    });
    var handleClickIcon = function() {
        var _ref = _asyncToGenerator(function() {
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!isSaved) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            removeTracks(token, id)
                        ];
                    case 1:
                        _state.sent();
                        updateState(false);
                        return [
                            3,
                            4
                        ];
                    case 2:
                        return [
                            4,
                            saveTracks(token, id)
                        ];
                    case 3:
                        _state.sent();
                        updateState(true);
                        _state.label = 4;
                    case 4:
                        onFavoriteStatusChange(!isSaved);
                        return [
                            2
                        ];
                }
            });
        });
        return function handleClickIcon() {
            return _ref.apply(this, arguments);
        };
    }();
    var title = getSpotifyLinkTitle(name, locale.title);
    var icon;
    if (showSaveIcon && id) {
        icon = /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", {
            "aria-label": isSaved ? locale.removeTrack : locale.saveTrack,
            className: isSaved ? "rswp__active" : void 0,
            onClick: handleClickIcon,
            title: isSaved ? locale.removeTrack : locale.saveTrack,
            type: "button",
            children: isSaved ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Favorite, {}) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FavoriteOutline, {})
        });
    }
    var classes = [];
    if (isActive) {
        classes.push("rswp__active");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Wrapper7, {
        className: classes.join(" "),
        "data-component-name": "Info",
        style: {
            h: height
        },
        children: [
            image && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("a", {
                "aria-label": title,
                href: getSpotifyLink(uri),
                rel: "noreferrer",
                target: "_blank",
                title: title,
                children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("img", {
                    alt: name,
                    src: image
                })
            }),
            !!name && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Title, {
                style: {
                    c: color,
                    h: height,
                    activeColor: activeColor,
                    trackArtistColor: trackArtistColor,
                    trackNameColor: trackNameColor
                },
                children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", {
                        children: [
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", {
                                children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("a", {
                                    "aria-label": title,
                                    href: getSpotifyLink(uri),
                                    rel: "noreferrer",
                                    target: "_blank",
                                    title: title,
                                    children: name
                                })
                            }),
                            icon
                        ]
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", {
                        title: artists.map(function(d) {
                            return d.name;
                        }).join(", "),
                        children: artists.map(function(artist, index) {
                            var artistTitle = getSpotifyLinkTitle(artist.name, locale.title);
                            return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("span", {
                                children: [
                                    index ? ", " : "",
                                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("a", {
                                        "aria-label": artistTitle,
                                        href: getSpotifyLink(artist.uri),
                                        rel: "noreferrer",
                                        target: "_blank",
                                        title: artistTitle,
                                        children: artist.name
                                    })
                                ]
                            }, artist.uri);
                        })
                    })
                ]
            })
        ]
    });
}
// src/components/Loader.tsx
var import_jsx_runtime19 = require("react/jsx-runtime");
var Wrapper8 = styled("div")({
    margin: "0 auto",
    position: "relative",
    "> div": {
        borderRadius: "50%",
        borderStyle: "solid",
        borderWidth: 0,
        boxSizing: "border-box",
        height: 0,
        left: "50%",
        position: "absolute",
        top: "50%",
        transform: "translate(-50%, -50%)",
        width: 0
    }
}, function(param) {
    var style = param.style;
    var pulse = keyframes({
        "0%": {
            height: 0,
            width: 0
        },
        "30%": {
            borderWidth: px(8),
            height: px(style.loaderSize),
            opacity: 1,
            width: px(style.loaderSize)
        },
        "100%": {
            borderWidth: 0,
            height: px(style.loaderSize),
            opacity: 0,
            width: px(style.loaderSize)
        }
    });
    return {
        height: px(style.loaderSize),
        width: px(style.loaderSize),
        "> div": {
            animation: "".concat(pulse, " 1.15s infinite cubic-bezier(0.215, 0.61, 0.355, 1)"),
            borderColor: style.loaderColor
        }
    };
}, "LoaderRSWP");
function Loader(param) {
    var _param_styles = param.styles, loaderColor = _param_styles.loaderColor, loaderSize = _param_styles.loaderSize;
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Wrapper8, {
        "data-component-name": "Loader",
        style: {
            loaderColor: loaderColor,
            loaderSize: loaderSize
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", {})
    });
}
// src/components/Player.tsx
var import_react6 = require("react");
var import_jsx_runtime20 = require("react/jsx-runtime");
put(".PlayerRSWP", {
    boxSizing: "border-box",
    fontSize: "inherit",
    width: "100%",
    "*": {
        boxSizing: "border-box"
    },
    button: {
        appearance: "none",
        backgroundColor: "transparent",
        border: 0,
        borderRadius: 0,
        color: "inherit",
        cursor: "pointer",
        display: "inline-flex",
        lineHeight: 1,
        padding: 0,
        ":focus": {
            outlineColor: "#000",
            outlineOffset: 3
        }
    },
    p: {
        margin: 0
    }
});
var Player = (0, import_react6.forwardRef)(function(_param, ref) {
    var children = _param.children, _param_styles = _param.styles, bgColor = _param_styles.bgColor, height = _param_styles.height, rest = _objectWithoutProperties(_param, [
        "children",
        "styles"
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", _objectSpreadProps(_objectSpread({
        ref: ref,
        className: "PlayerRSWP",
        "data-component-name": "Player",
        style: {
            backgroundColor: bgColor,
            minHeight: px(height)
        }
    }, rest), {
        children: children
    }));
});
var Player_default = Player;
// src/components/Slider.tsx
var import_react_range_slider2 = __toESM(require("@gilbarbara/react-range-slider"));
var import_jsx_runtime21 = require("react/jsx-runtime");
var Wrapper9 = styled("div")({
    display: "flex",
    position: "relative",
    transition: "height 0.3s",
    zIndex: 10
}, function(param) {
    var style = param.style;
    return {
        height: px(style.sliderHeight)
    };
}, "SliderRSWP");
function Slider(props) {
    var isMagnified = props.isMagnified, onChangeRange = props.onChangeRange, onToggleMagnify = props.onToggleMagnify, position = props.position, styles = props.styles;
    var handleChangeRange = function() {
        var _ref = _asyncToGenerator(function(param) {
            var x;
            return __generator(this, function(_state) {
                x = param.x;
                onChangeRange(x);
                return [
                    2
                ];
            });
        });
        return function handleChangeRange(_) {
            return _ref.apply(this, arguments);
        };
    }();
    var handleSize = styles.sliderHeight + 6;
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Wrapper9, {
        "data-component-name": "Slider",
        "data-position": position,
        onMouseEnter: onToggleMagnify,
        onMouseLeave: onToggleMagnify,
        style: {
            sliderHeight: isMagnified ? styles.sliderHeight + 4 : styles.sliderHeight
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(import_react_range_slider2.default, {
            axis: "x",
            className: "slider",
            onChange: handleChangeRange,
            styles: {
                options: {
                    thumbBorder: 0,
                    thumbBorderRadius: styles.sliderHandleBorderRadius,
                    thumbColor: styles.sliderHandleColor,
                    thumbSize: isMagnified ? handleSize + 4 : handleSize,
                    height: isMagnified ? styles.sliderHeight + 4 : styles.sliderHeight,
                    padding: 0,
                    rangeColor: styles.sliderColor,
                    trackBorderRadius: styles.sliderTrackBorderRadius,
                    trackColor: styles.sliderTrackColor
                }
            },
            x: position,
            xMax: 100,
            xMin: 0,
            xStep: 0.1
        })
    });
}
// src/index.tsx
var import_jsx_runtime22 = require("react/jsx-runtime");
var SpotifyWebPlayer = /*#__PURE__*/ function(_import_react7_PureComponent) {
    _inherits(SpotifyWebPlayer, _import_react7_PureComponent);
    var _super = _createSuper(SpotifyWebPlayer);
    function SpotifyWebPlayer(props) {
        _classCallCheck(this, SpotifyWebPlayer);
        var _this;
        _this = _super.call(this, props);
        __publicField(_assertThisInitialized(_this), "isActive", false);
        __publicField(_assertThisInitialized(_this), "emptyTrack", {
            artists: [],
            durationMs: 0,
            id: "",
            image: "",
            name: "",
            uri: ""
        });
        __publicField(_assertThisInitialized(_this), "hasNewToken", false);
        __publicField(_assertThisInitialized(_this), "player");
        __publicField(_assertThisInitialized(_this), "playerProgressInterval");
        __publicField(_assertThisInitialized(_this), "playerSyncInterval");
        __publicField(_assertThisInitialized(_this), "ref", (0, import_react7.createRef)());
        __publicField(_assertThisInitialized(_this), "seekUpdateInterval", 100);
        __publicField(_assertThisInitialized(_this), "styles");
        __publicField(_assertThisInitialized(_this), "syncTimeout");
        __publicField(_assertThisInitialized(_this), "getPlayOptions", (0, import_memoize_one.default)(function(data) {
            var playOptions = {
                context_uri: void 0,
                uris: void 0
            };
            if (data) {
                var ids = Array.isArray(data) ? data : [
                    data
                ];
                if (!ids.every(function(d) {
                    return validateURI(d);
                })) {
                    console.error("Invalid URI");
                    return playOptions;
                }
                if (ids.some(function(d) {
                    return getSpotifyURIType(d) === "track";
                })) {
                    if (!ids.every(function(d) {
                        return getSpotifyURIType(d) === "track";
                    })) {
                        console.warn("You can't mix tracks URIs with other types");
                    }
                    playOptions.uris = ids.filter(function(d) {
                        return validateURI(d) && getSpotifyURIType(d) === "track";
                    });
                } else {
                    if (ids.length > 1) {
                        console.warn("Albums, Artists, Playlists and Podcasts can't have multiple URIs");
                    }
                    playOptions.context_uri = ids[0];
                }
            }
            return playOptions;
        }));
        var _this1 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handleChangeRange", function() {
            var _ref = _asyncToGenerator(function(position) {
                var track, _this_props, callback, token, progress, percentage, state, error;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            track = _this1.state.track;
                            _this_props = _this1.props, callback = _this_props.callback, token = _this_props.token;
                            progress = 0;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                8,
                                ,
                                9
                            ]);
                            percentage = position / 100;
                            if (!_this1.isExternalPlayer) return [
                                3,
                                3
                            ];
                            progress = Math.round(track.durationMs * percentage);
                            return [
                                4,
                                seek(token, progress)
                            ];
                        case 2:
                            _state.sent();
                            _this1.updateState({
                                position: position,
                                progressMs: progress
                            });
                            return [
                                3,
                                7
                            ];
                        case 3:
                            if (!_this1.player) return [
                                3,
                                7
                            ];
                            return [
                                4,
                                _this1.player.getCurrentState()
                            ];
                        case 4:
                            state = _state.sent();
                            if (!state) return [
                                3,
                                6
                            ];
                            progress = Math.round(state.track_window.current_track.duration_ms * percentage);
                            return [
                                4,
                                _this1.player.seek(progress)
                            ];
                        case 5:
                            _state.sent();
                            _this1.updateState({
                                position: position,
                                progressMs: progress
                            });
                            return [
                                3,
                                7
                            ];
                        case 6:
                            _this1.updateState({
                                position: 0
                            });
                            _state.label = 7;
                        case 7:
                            if (callback) {
                                callback(_objectSpreadProps(_objectSpread({}, _this1.state), {
                                    type: TYPE.PROGRESS
                                }));
                            }
                            return [
                                3,
                                9
                            ];
                        case 8:
                            error = _state.sent();
                            console.error(error);
                            return [
                                3,
                                9
                            ];
                        case 9:
                            return [
                                2
                            ];
                    }
                });
            });
            return function(position) {
                return _ref.apply(this, arguments);
            };
        }());
        var _this2 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handleClickTogglePlay", /*#__PURE__*/ _asyncToGenerator(function() {
            var isActive, error;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        isActive = _this2.state.isActive;
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            _this2.togglePlay(!_this2.isExternalPlayer && !isActive)
                        ];
                    case 2:
                        _state.sent();
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error = _state.sent();
                        console.error(error);
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this3 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handleClickPrevious", /*#__PURE__*/ _asyncToGenerator(function() {
            var token, error;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        _state.trys.push([
                            0,
                            5,
                            ,
                            6
                        ]);
                        if (!_this3.isExternalPlayer) return [
                            3,
                            2
                        ];
                        token = _this3.props.token;
                        return [
                            4,
                            previous(token)
                        ];
                    case 1:
                        _state.sent();
                        _this3.syncTimeout = window.setTimeout(function() {
                            _this3.syncDevice();
                        }, 300);
                        return [
                            3,
                            4
                        ];
                    case 2:
                        if (!_this3.player) return [
                            3,
                            4
                        ];
                        return [
                            4,
                            _this3.player.previousTrack()
                        ];
                    case 3:
                        _state.sent();
                        _state.label = 4;
                    case 4:
                        return [
                            3,
                            6
                        ];
                    case 5:
                        error = _state.sent();
                        console.error(error);
                        return [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this4 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handleClickNext", /*#__PURE__*/ _asyncToGenerator(function() {
            var token, error;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        _state.trys.push([
                            0,
                            5,
                            ,
                            6
                        ]);
                        if (!_this4.isExternalPlayer) return [
                            3,
                            2
                        ];
                        token = _this4.props.token;
                        return [
                            4,
                            next(token)
                        ];
                    case 1:
                        _state.sent();
                        _this4.syncTimeout = window.setTimeout(function() {
                            _this4.syncDevice();
                        }, 300);
                        return [
                            3,
                            4
                        ];
                    case 2:
                        if (!_this4.player) return [
                            3,
                            4
                        ];
                        return [
                            4,
                            _this4.player.nextTrack()
                        ];
                    case 3:
                        _state.sent();
                        _state.label = 4;
                    case 4:
                        return [
                            3,
                            6
                        ];
                    case 5:
                        error = _state.sent();
                        console.error(error);
                        return [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this5 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handleClickDevice", function() {
            var _ref = _asyncToGenerator(function(deviceId) {
                var isUnsupported, _this_props, autoPlay, persistDeviceSelection, token, player, error;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            isUnsupported = _this5.state.isUnsupported;
                            _this_props = _this5.props, autoPlay = _this_props.autoPlay, persistDeviceSelection = _this_props.persistDeviceSelection, token = _this_props.token;
                            _this5.updateState({
                                currentDeviceId: deviceId
                            });
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                7,
                                ,
                                8
                            ]);
                            return [
                                4,
                                setDevice(token, deviceId)
                            ];
                        case 2:
                            _state.sent();
                            if (persistDeviceSelection) {
                                sessionStorage.setItem("rswpDeviceId", deviceId);
                            }
                            if (!isUnsupported) return [
                                3,
                                6
                            ];
                            return [
                                4,
                                _this5.syncDevice()
                            ];
                        case 3:
                            _state.sent();
                            return [
                                4,
                                getPlaybackState(token)
                            ];
                        case 4:
                            player = _state.sent();
                            if (!(player && !player.is_playing && autoPlay)) return [
                                3,
                                6
                            ];
                            return [
                                4,
                                _this5.togglePlay(true)
                            ];
                        case 5:
                            _state.sent();
                            _state.label = 6;
                        case 6:
                            return [
                                3,
                                8
                            ];
                        case 7:
                            error = _state.sent();
                            console.error(error);
                            return [
                                3,
                                8
                            ];
                        case 8:
                            return [
                                2
                            ];
                    }
                });
            });
            return function(deviceId) {
                return _ref.apply(this, arguments);
            };
        }());
        __publicField(_assertThisInitialized(_this), "handleFavoriteStatusChange", function(status) {
            var isSaved = _this.state.isSaved;
            _this.updateState({
                isSaved: status
            });
            if (isSaved !== status) {
                _this.handleCallback(_objectSpreadProps(_objectSpread({}, _this.state), {
                    isSaved: status,
                    type: TYPE.FAVORITE
                }));
            }
        });
        var _this6 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handlePlayerErrors", function() {
            var _ref = _asyncToGenerator(function(type, message) {
                var status, isPlaybackError, isInitializationError, nextStatus, devices, token, ref, ref1;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            status = _this6.state.status;
                            isPlaybackError = type === "playback_error";
                            isInitializationError = type === "initialization_error";
                            nextStatus = status;
                            devices = [];
                            if (!(_this6.player && !isPlaybackError)) return [
                                3,
                                2
                            ];
                            return [
                                4,
                                _this6.player.disconnect()
                            ];
                        case 1:
                            _state.sent();
                            _this6.player = void 0;
                            _state.label = 2;
                        case 2:
                            if (!isInitializationError) return [
                                3,
                                4
                            ];
                            token = _this6.props.token;
                            nextStatus = STATUS.UNSUPPORTED;
                            return [
                                4,
                                getDevices(token)
                            ];
                        case 3:
                            ref = _state.sent(), ref1 = ref.devices, devices = ref1 === void 0 ? [] : ref1, ref;
                            _state.label = 4;
                        case 4:
                            if (!isInitializationError && !isPlaybackError) {
                                nextStatus = STATUS.ERROR;
                            }
                            _this6.updateState({
                                devices: devices,
                                error: message,
                                errorType: type,
                                isInitializing: false,
                                isUnsupported: isInitializationError,
                                status: nextStatus
                            });
                            return [
                                2
                            ];
                    }
                });
            });
            return function(type, message) {
                return _ref.apply(this, arguments);
            };
        }());
        var _this7 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handlePlayerStateChanges", function() {
            var _ref = _asyncToGenerator(function(state) {
                var _this_player, paused, position, _state_track_window, _state_track_window_current_track, album, artists, duration_ms, id, name, uri, next_tracks, previous_tracks, isPlaying, volume, track, trackState, error;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            _state.trys.push([
                                0,
                                6,
                                ,
                                7
                            ]);
                            if (!state) return [
                                3,
                                2
                            ];
                            paused = state.paused, position = state.position, _state_track_window = state.track_window, _state_track_window_current_track = _state_track_window.current_track, album = _state_track_window_current_track.album, artists = _state_track_window_current_track.artists, duration_ms = _state_track_window_current_track.duration_ms, id = _state_track_window_current_track.id, name = _state_track_window_current_track.name, uri = _state_track_window_current_track.uri, next_tracks = _state_track_window.next_tracks, previous_tracks = _state_track_window.previous_tracks;
                            isPlaying = !paused;
                            return [
                                4,
                                (_this_player = _this7.player) === null || _this_player === void 0 ? void 0 : _this_player.getVolume()
                            ];
                        case 1:
                            volume = _state.sent() || 100;
                            track = {
                                artists: artists,
                                durationMs: duration_ms,
                                id: id,
                                image: _this7.setAlbumImage(album),
                                name: name,
                                uri: uri
                            };
                            if (position === 0) {
                                trackState = {
                                    nextTracks: next_tracks,
                                    position: 0,
                                    previousTracks: previous_tracks,
                                    track: track
                                };
                            }
                            _this7.updateState(_objectSpread({
                                error: "",
                                errorType: "",
                                isActive: true,
                                isPlaying: isPlaying,
                                progressMs: position,
                                volume: round(volume)
                            }, trackState));
                            return [
                                3,
                                5
                            ];
                        case 2:
                            if (!_this7.isExternalPlayer) return [
                                3,
                                4
                            ];
                            return [
                                4,
                                _this7.syncDevice()
                            ];
                        case 3:
                            _state.sent();
                            return [
                                3,
                                5
                            ];
                        case 4:
                            _this7.updateState({
                                isActive: false,
                                isPlaying: false,
                                nextTracks: [],
                                position: 0,
                                previousTracks: [],
                                track: {
                                    artists: "",
                                    durationMs: 0,
                                    id: "",
                                    image: "",
                                    name: "",
                                    uri: ""
                                }
                            });
                            _state.label = 5;
                        case 5:
                            return [
                                3,
                                7
                            ];
                        case 6:
                            error = _state.sent();
                            console.error(error);
                            return [
                                3,
                                7
                            ];
                        case 7:
                            return [
                                2
                            ];
                    }
                });
            });
            return function(state) {
                return _ref.apply(this, arguments);
            };
        }());
        var _this8 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "handlePlayerStatus", function() {
            var _ref = _asyncToGenerator(function(param) {
                var device_id, _ref, currentDeviceId, devices;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            device_id = param.device_id;
                            return [
                                4,
                                _this8.initializeDevices(device_id)
                            ];
                        case 1:
                            _ref = _state.sent(), currentDeviceId = _ref.currentDeviceId, devices = _ref.devices;
                            _this8.updateState({
                                currentDeviceId: currentDeviceId,
                                deviceId: device_id,
                                devices: devices,
                                isInitializing: false,
                                status: device_id ? STATUS.READY : STATUS.IDLE
                            });
                            return [
                                2
                            ];
                    }
                });
            });
            return function(_) {
                return _ref.apply(this, arguments);
            };
        }());
        __publicField(_assertThisInitialized(_this), "handleToggleMagnify", function() {
            var magnifySliderOnHover = _this.props.magnifySliderOnHover;
            if (magnifySliderOnHover) {
                _this.updateState(function(previousState) {
                    return {
                        isMagnified: !previousState.isMagnified
                    };
                });
            }
        });
        __publicField(_assertThisInitialized(_this), "initializePlayer", function() {
            var volume = _this.state.volume;
            var _this_props = _this.props, _this_props_name = _this_props.name, name = _this_props_name === void 0 ? "Spotify Web Player" : _this_props_name, token = _this_props.token;
            if (!window.Spotify) {
                return;
            }
            _this.updateState({
                error: "",
                errorType: "",
                isInitializing: true
            });
            _this.player = new window.Spotify.Player({
                getOAuthToken: function(callback) {
                    callback(token);
                },
                name: name,
                volume: volume
            });
            _this.player.addListener("ready", _this.handlePlayerStatus);
            _this.player.addListener("not_ready", _this.handlePlayerStatus);
            _this.player.addListener("player_state_changed", _this.handlePlayerStateChanges);
            _this.player.addListener("initialization_error", function(error) {
                return _this.handlePlayerErrors("initialization_error", error.message);
            });
            _this.player.addListener("authentication_error", function(error) {
                return _this.handlePlayerErrors("authentication_error", error.message);
            });
            _this.player.addListener("account_error", function(error) {
                return _this.handlePlayerErrors("account_error", error.message);
            });
            _this.player.addListener("playback_error", function(error) {
                return _this.handlePlayerErrors("playback_error", error.message);
            });
            _this.player.connect();
        });
        __publicField(_assertThisInitialized(_this), "setAlbumImage", function(album) {
            var _Math;
            var width = (_Math = Math).min.apply(_Math, _toConsumableArray(album.images.map(function(d) {
                return d.width || 0;
            })));
            var thumb = album.images.find(function(d) {
                return d.width === width;
            }) || {};
            return thumb.url;
        });
        __publicField(_assertThisInitialized(_this), "setExternalDevice", function(id) {
            _this.updateState({
                currentDeviceId: id,
                isPlaying: true
            });
        });
        var _this9 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "setVolume", function() {
            var _ref = _asyncToGenerator(function(volume) {
                var token;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            token = _this9.props.token;
                            if (!_this9.isExternalPlayer) return [
                                3,
                                3
                            ];
                            return [
                                4,
                                setVolume(token, Math.round(volume * 100))
                            ];
                        case 1:
                            _state.sent();
                            return [
                                4,
                                _this9.syncDevice()
                            ];
                        case 2:
                            _state.sent();
                            return [
                                3,
                                5
                            ];
                        case 3:
                            if (!_this9.player) return [
                                3,
                                5
                            ];
                            return [
                                4,
                                _this9.player.setVolume(volume)
                            ];
                        case 4:
                            _state.sent();
                            _state.label = 5;
                        case 5:
                            _this9.updateState({
                                volume: volume
                            });
                            return [
                                2
                            ];
                    }
                });
            });
            return function(volume) {
                return _ref.apply(this, arguments);
            };
        }());
        var _this10 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "syncDevice", /*#__PURE__*/ _asyncToGenerator(function() {
            var deviceId, token, player, track, error, state;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!_this10.isActive) {
                            return [
                                2
                            ];
                        }
                        deviceId = _this10.state.deviceId;
                        token = _this10.props.token;
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            getPlaybackState(token)
                        ];
                    case 2:
                        player = _state.sent();
                        track = _this10.emptyTrack;
                        if (!player) {
                            throw new Error("No player");
                        }
                        if (player.item) {
                            track = {
                                artists: player.item.artists,
                                durationMs: player.item.duration_ms,
                                id: player.item.id,
                                image: _this10.setAlbumImage(player.item.album),
                                name: player.item.name,
                                uri: player.item.uri
                            };
                        }
                        _this10.updateState({
                            error: "",
                            errorType: "",
                            isActive: true,
                            isPlaying: player.is_playing,
                            nextTracks: [],
                            previousTracks: [],
                            progressMs: player.item ? player.progress_ms : 0,
                            status: STATUS.READY,
                            track: track,
                            volume: parseVolume(player.device.volume_percent)
                        });
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error = _state.sent();
                        state = {
                            isActive: false,
                            isPlaying: false,
                            position: 0,
                            track: _this10.emptyTrack
                        };
                        if (deviceId) {
                            _this10.updateState(_objectSpread({
                                currentDeviceId: deviceId
                            }, state));
                            return [
                                2
                            ];
                        }
                        _this10.updateState(_objectSpread({
                            error: error.message,
                            errorType: "player_status",
                            status: STATUS.ERROR
                        }, state));
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this11 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "toggleOffset", /*#__PURE__*/ _asyncToGenerator(function() {
            var currentDeviceId, _this_props, offset, token, uris;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        currentDeviceId = _this11.state.currentDeviceId;
                        _this_props = _this11.props, offset = _this_props.offset, token = _this_props.token, uris = _this_props.uris;
                        if (!(typeof offset === "number" && Array.isArray(uris))) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            play(token, {
                                deviceId: currentDeviceId,
                                offset: offset,
                                uris: uris
                            })
                        ];
                    case 1:
                        _state.sent();
                        _state.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this12 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "togglePlay", /*#__PURE__*/ _asyncToGenerator(function() {
            var init, _this_state, currentDeviceId, isPlaying, needsUpdate, _this_props, offset, token, uris, shouldInitialize, playOptions, playerState, error;
            var _arguments = arguments;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        init = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : false;
                        _this_state = _this12.state, currentDeviceId = _this_state.currentDeviceId, isPlaying = _this_state.isPlaying, needsUpdate = _this_state.needsUpdate;
                        _this_props = _this12.props, offset = _this_props.offset, token = _this_props.token, uris = _this_props.uris;
                        shouldInitialize = init || needsUpdate;
                        playOptions = _this12.getPlayOptions(uris);
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            13,
                            ,
                            14
                        ]);
                        if (!_this12.isExternalPlayer) return [
                            3,
                            6
                        ];
                        if (!!isPlaying) return [
                            3,
                            3
                        ];
                        return [
                            4,
                            play(token, _objectSpread({
                                deviceId: currentDeviceId,
                                offset: offset
                            }, shouldInitialize ? playOptions : void 0))
                        ];
                    case 2:
                        _state.sent();
                        return [
                            3,
                            5
                        ];
                    case 3:
                        return [
                            4,
                            pause(token)
                        ];
                    case 4:
                        _state.sent();
                        _this12.updateState({
                            isPlaying: false
                        });
                        _state.label = 5;
                    case 5:
                        _this12.syncTimeout = window.setTimeout(function() {
                            _this12.syncDevice();
                        }, 300);
                        return [
                            3,
                            12
                        ];
                    case 6:
                        if (!_this12.player) return [
                            3,
                            12
                        ];
                        return [
                            4,
                            _this12.player.getCurrentState()
                        ];
                    case 7:
                        playerState = _state.sent();
                        return [
                            4,
                            _this12.player.activateElement()
                        ];
                    case 8:
                        _state.sent();
                        if (!(!playerState && !!(playOptions.context_uri || playOptions.uris) || shouldInitialize && playerState && playerState.paused)) return [
                            3,
                            10
                        ];
                        return [
                            4,
                            play(token, _objectSpread({
                                deviceId: currentDeviceId,
                                offset: offset
                            }, shouldInitialize ? playOptions : void 0))
                        ];
                    case 9:
                        _state.sent();
                        return [
                            3,
                            12
                        ];
                    case 10:
                        return [
                            4,
                            _this12.player.togglePlay()
                        ];
                    case 11:
                        _state.sent();
                        _state.label = 12;
                    case 12:
                        if (needsUpdate) {
                            _this12.updateState({
                                needsUpdate: false
                            });
                        }
                        return [
                            3,
                            14
                        ];
                    case 13:
                        error = _state.sent();
                        console.error(error);
                        return [
                            3,
                            14
                        ];
                    case 14:
                        return [
                            2
                        ];
                }
            });
        }));
        var _this13 = _assertThisInitialized(_this);
        __publicField(_assertThisInitialized(_this), "updateSeekBar", /*#__PURE__*/ _asyncToGenerator(function() {
            var _this_state, progressMs, track, position, state, progress, position1, error;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!_this13.isActive) {
                            return [
                                2
                            ];
                        }
                        _this_state = _this13.state, progressMs = _this_state.progressMs, track = _this_state.track;
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            5,
                            ,
                            6
                        ]);
                        if (!_this13.isExternalPlayer) return [
                            3,
                            2
                        ];
                        position = progressMs / track.durationMs;
                        position = Number(((Number.isFinite(position) ? position : 0) * 100).toFixed(1));
                        _this13.updateState({
                            position: position,
                            progressMs: progressMs + _this13.seekUpdateInterval
                        });
                        return [
                            3,
                            4
                        ];
                    case 2:
                        if (!_this13.player) return [
                            3,
                            4
                        ];
                        return [
                            4,
                            _this13.player.getCurrentState()
                        ];
                    case 3:
                        state = _state.sent();
                        if (state) {
                            progress = state.position;
                            position1 = Number((progress / state.track_window.current_track.duration_ms * 100).toFixed(1));
                            _this13.updateState({
                                position: position1,
                                progressMs: progress + _this13.seekUpdateInterval
                            });
                        }
                        _state.label = 4;
                    case 4:
                        return [
                            3,
                            6
                        ];
                    case 5:
                        error = _state.sent();
                        console.error(error);
                        return [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        }));
        __publicField(_assertThisInitialized(_this), "updateState", function() {
            var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            if (!_this.isActive) {
                return;
            }
            _this.setState(state);
        });
        _this.state = {
            currentDeviceId: "",
            deviceId: "",
            devices: [],
            error: "",
            errorType: "",
            isActive: false,
            isInitializing: false,
            isMagnified: false,
            isPlaying: false,
            isSaved: false,
            isUnsupported: false,
            needsUpdate: false,
            nextTracks: [],
            playerPosition: "bottom",
            position: 0,
            previousTracks: [],
            progressMs: 0,
            status: STATUS.IDLE,
            track: _this.emptyTrack,
            volume: parseVolume(props.initialVolume) || 1
        };
        _this.styles = getMergedStyles(props.styles);
        return _this;
    }
    _createClass(SpotifyWebPlayer, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_ref_current, _ref, _ref_top, top;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.isActive = true;
                                _ref = ((_this_ref_current = _this.ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.getBoundingClientRect()) || {}, _ref_top = _ref.top, top = _ref_top === void 0 ? 0 : _ref_top;
                                _this.updateState({
                                    playerPosition: top > window.innerHeight / 2 ? "bottom" : "top",
                                    status: STATUS.INITIALIZING
                                });
                                if (!window.onSpotifyWebPlaybackSDKReady) {
                                    window.onSpotifyWebPlaybackSDKReady = _this.initializePlayer;
                                } else {
                                    _this.initializePlayer();
                                }
                                return [
                                    4,
                                    loadSpotifyPlayer()
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(previousProps, previousState) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_state, currentDeviceId, deviceId, errorType, isInitializing, isPlaying, status, track, _this_props, autoPlay, offset, playProp, showSaveIcon, styles, syncExternalDevice, token, uris, isReady, changedStyles, changedURIs, playOptions, canPlay, shouldPlay, player;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this_state = _this.state, currentDeviceId = _this_state.currentDeviceId, deviceId = _this_state.deviceId, errorType = _this_state.errorType, isInitializing = _this_state.isInitializing, isPlaying = _this_state.isPlaying, status = _this_state.status, track = _this_state.track;
                                _this_props = _this.props, autoPlay = _this_props.autoPlay, offset = _this_props.offset, playProp = _this_props.play, showSaveIcon = _this_props.showSaveIcon, styles = _this_props.styles, syncExternalDevice = _this_props.syncExternalDevice, token = _this_props.token, uris = _this_props.uris;
                                isReady = previousState.status !== STATUS.READY && status === STATUS.READY;
                                changedStyles = !(0, import_deep_equal.default)(previousProps.styles, styles);
                                changedURIs = !(0, import_deep_equal.default)(previousProps.uris, uris);
                                playOptions = _this.getPlayOptions(uris);
                                canPlay = !!currentDeviceId && !!(playOptions.context_uri || playOptions.uris);
                                shouldPlay = changedURIs && isPlaying || !!(isReady && (autoPlay || playProp));
                                if (!(canPlay && shouldPlay)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    play(token, _objectSpread({
                                        deviceId: currentDeviceId,
                                        offset: offset
                                    }, playOptions))
                                ];
                            case 1:
                                _state.sent();
                                if (!isPlaying) {
                                    _this.updateState({
                                        isPlaying: true
                                    });
                                }
                                if (_this.isExternalPlayer) {
                                    _this.syncTimeout = window.setTimeout(function() {
                                        _this.syncDevice();
                                    }, 600);
                                }
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                if (changedURIs && !isPlaying) {
                                    _this.updateState({
                                        needsUpdate: true
                                    });
                                }
                                _state.label = 3;
                            case 3:
                                if (previousState.status !== status) {
                                    _this.handleCallback(_objectSpreadProps(_objectSpread({}, _this.state), {
                                        type: TYPE.STATUS
                                    }));
                                }
                                if (!(previousState.currentDeviceId !== currentDeviceId && currentDeviceId)) return [
                                    3,
                                    6
                                ];
                                if (!isReady) {
                                    _this.handleCallback(_objectSpreadProps(_objectSpread({}, _this.state), {
                                        type: TYPE.DEVICE
                                    }));
                                }
                                return [
                                    4,
                                    _this.toggleSyncInterval(_this.isExternalPlayer)
                                ];
                            case 4:
                                _state.sent();
                                return [
                                    4,
                                    _this.updateSeekBar()
                                ];
                            case 5:
                                _state.sent();
                                _state.label = 6;
                            case 6:
                                if (previousState.track.id !== track.id && track.id) {
                                    _this.handleCallback(_objectSpreadProps(_objectSpread({}, _this.state), {
                                        type: TYPE.TRACK
                                    }));
                                    if (showSaveIcon) {
                                        _this.updateState({
                                            isSaved: false
                                        });
                                    }
                                }
                                if (!(previousState.isPlaying !== isPlaying)) return [
                                    3,
                                    8
                                ];
                                _this.toggleProgressBar();
                                return [
                                    4,
                                    _this.toggleSyncInterval(_this.isExternalPlayer)
                                ];
                            case 7:
                                _state.sent();
                                _this.handleCallback(_objectSpreadProps(_objectSpread({}, _this.state), {
                                    type: TYPE.PLAYER
                                }));
                                _state.label = 8;
                            case 8:
                                if (token && previousProps.token !== token) {
                                    if (!isInitializing) {
                                        _this.initializePlayer();
                                    } else {
                                        _this.hasNewToken = true;
                                    }
                                }
                                if (!(previousProps.play !== playProp && playProp !== isPlaying)) return [
                                    3,
                                    10
                                ];
                                return [
                                    4,
                                    _this.togglePlay(!track.id || changedURIs)
                                ];
                            case 9:
                                _state.sent();
                                _state.label = 10;
                            case 10:
                                if (!(previousProps.offset !== offset)) return [
                                    3,
                                    12
                                ];
                                return [
                                    4,
                                    _this.toggleOffset()
                                ];
                            case 11:
                                _state.sent();
                                _state.label = 12;
                            case 12:
                                if (!(previousState.isInitializing && !isInitializing)) return [
                                    3,
                                    14
                                ];
                                if (!(syncExternalDevice && !uris)) return [
                                    3,
                                    14
                                ];
                                return [
                                    4,
                                    getPlaybackState(token)
                                ];
                            case 13:
                                player = _state.sent();
                                if (player && player.is_playing && player.device.id !== deviceId) {
                                    _this.setExternalDevice(player.device.id);
                                }
                                _state.label = 14;
                            case 14:
                                if (changedStyles) {
                                    _this.styles = getMergedStyles(styles);
                                }
                                if (errorType === "authentication_error" && _this.hasNewToken) {
                                    _this.hasNewToken = false;
                                    _this.initializePlayer();
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var _this = this;
                return _asyncToGenerator(function() {
                    return __generator(this, function(_state) {
                        _this.isActive = false;
                        if (_this.player) {
                            _this.player.disconnect();
                        }
                        clearInterval(_this.playerSyncInterval);
                        clearInterval(_this.playerProgressInterval);
                        clearTimeout(_this.syncTimeout);
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "isExternalPlayer",
            get: function get() {
                var _this_state = this.state, currentDeviceId = _this_state.currentDeviceId, deviceId = _this_state.deviceId, status = _this_state.status;
                return currentDeviceId && currentDeviceId !== deviceId || status === STATUS.UNSUPPORTED;
            }
        },
        {
            key: "handleCallback",
            value: function handleCallback(state) {
                var callback = this.props.callback;
                if (callback) {
                    callback(state);
                }
            }
        },
        {
            key: "initializeDevices",
            value: function initializeDevices(id) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_props, persistDeviceSelection, token, devices, currentDeviceId, savedDeviceId;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this_props = _this.props, persistDeviceSelection = _this_props.persistDeviceSelection, token = _this_props.token;
                                return [
                                    4,
                                    getDevices(token)
                                ];
                            case 1:
                                devices = _state.sent().devices;
                                currentDeviceId = id;
                                if (persistDeviceSelection) {
                                    savedDeviceId = sessionStorage.getItem("rswpDeviceId");
                                    if (!savedDeviceId || !devices.some(function(d) {
                                        return d.id === savedDeviceId;
                                    })) {
                                        sessionStorage.setItem("rswpDeviceId", currentDeviceId);
                                    } else {
                                        currentDeviceId = savedDeviceId;
                                    }
                                }
                                return [
                                    2,
                                    {
                                        currentDeviceId: currentDeviceId,
                                        devices: devices
                                    }
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "toggleSyncInterval",
            value: function toggleSyncInterval(shouldSync) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var syncExternalDeviceInterval, error;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                syncExternalDeviceInterval = _this.props.syncExternalDeviceInterval;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    4,
                                    ,
                                    5
                                ]);
                                if (!(_this.isExternalPlayer && shouldSync && !_this.playerSyncInterval)) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    _this.syncDevice()
                                ];
                            case 2:
                                _state.sent();
                                clearInterval(_this.playerSyncInterval);
                                _this.playerSyncInterval = window.setInterval(_this.syncDevice, syncExternalDeviceInterval * 1e3);
                                _state.label = 3;
                            case 3:
                                if ((!shouldSync || !_this.isExternalPlayer) && _this.playerSyncInterval) {
                                    clearInterval(_this.playerSyncInterval);
                                    _this.playerSyncInterval = void 0;
                                }
                                return [
                                    3,
                                    5
                                ];
                            case 4:
                                error = _state.sent();
                                console.error(error);
                                return [
                                    3,
                                    5
                                ];
                            case 5:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "toggleProgressBar",
            value: function toggleProgressBar() {
                var isPlaying = this.state.isPlaying;
                if (isPlaying) {
                    if (!this.playerProgressInterval) {
                        this.playerProgressInterval = window.setInterval(this.updateSeekBar, this.seekUpdateInterval);
                    }
                } else if (this.playerProgressInterval) {
                    clearInterval(this.playerProgressInterval);
                    this.playerProgressInterval = void 0;
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_state = this.state, currentDeviceId = _this_state.currentDeviceId, deviceId = _this_state.deviceId, devices = _this_state.devices, error = _this_state.error, errorType = _this_state.errorType, isActive = _this_state.isActive, isMagnified = _this_state.isMagnified, isPlaying = _this_state.isPlaying, isUnsupported = _this_state.isUnsupported, nextTracks = _this_state.nextTracks, playerPosition = _this_state.playerPosition, position = _this_state.position, previousTracks = _this_state.previousTracks, status = _this_state.status, track = _this_state.track, volume = _this_state.volume;
                var _this_props = this.props, locale = _this_props.locale, name = _this_props.name, showSaveIcon = _this_props.showSaveIcon, token = _this_props.token, updateSavedStatus = _this_props.updateSavedStatus;
                var isReady = [
                    STATUS.READY,
                    STATUS.UNSUPPORTED
                ].indexOf(status) >= 0;
                var isPlaybackError = errorType === "playback_error";
                var localeMerged = getLocale(locale);
                var output = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Loader, {
                    styles: this.styles
                });
                var info;
                if (isPlaybackError) {
                    info = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", {
                        children: error
                    });
                }
                if (isReady) {
                    if (!info) {
                        info = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Info, {
                            isActive: isActive,
                            locale: localeMerged,
                            onFavoriteStatusChange: this.handleFavoriteStatusChange,
                            showSaveIcon: showSaveIcon,
                            styles: this.styles,
                            token: token,
                            track: track,
                            updateSavedStatus: updateSavedStatus
                        });
                    }
                    output = /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, {
                        children: [
                            info,
                            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Controls, {
                                isExternalDevice: this.isExternalPlayer,
                                isPlaying: isPlaying,
                                locale: localeMerged,
                                nextTracks: nextTracks,
                                onClickNext: this.handleClickNext,
                                onClickPrevious: this.handleClickPrevious,
                                onClickTogglePlay: this.handleClickTogglePlay,
                                previousTracks: previousTracks,
                                styles: this.styles
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Actions, {
                                currentDeviceId: currentDeviceId,
                                deviceId: deviceId,
                                devices: devices,
                                isDevicesOpen: isUnsupported && !deviceId,
                                locale: localeMerged,
                                onClickDevice: this.handleClickDevice,
                                playerPosition: playerPosition,
                                setVolume: this.setVolume,
                                styles: this.styles,
                                volume: volume
                            })
                        ]
                    });
                } else if (info) {
                    output = info;
                }
                if (status === STATUS.ERROR) {
                    output = /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(ErrorMessage, {
                        styles: this.styles,
                        children: [
                            name,
                            ": ",
                            error
                        ]
                    });
                }
                return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(Player_default, {
                    ref: this.ref,
                    "data-ready": isReady,
                    styles: this.styles,
                    children: [
                        isReady && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Slider, {
                            isMagnified: isMagnified,
                            onChangeRange: this.handleChangeRange,
                            onToggleMagnify: this.handleToggleMagnify,
                            position: position,
                            styles: this.styles
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Content, {
                            styles: this.styles,
                            children: output
                        })
                    ]
                });
            }
        }
    ]);
    return SpotifyWebPlayer;
}(import_react7.PureComponent);
__publicField(SpotifyWebPlayer, "defaultProps", {
    autoPlay: false,
    initialVolume: 1,
    magnifySliderOnHover: false,
    name: "Spotify Web Player",
    persistDeviceSelection: false,
    showSaveIcon: false,
    syncExternalDeviceInterval: 5,
    syncExternalDevice: false
});
var src_default = SpotifyWebPlayer;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    STATUS: STATUS,
    TYPE: TYPE
});
//# sourceMappingURL=index.js.map